//Speka.lang
class Object
{
    def new(){
        return this
    }
    def toInt(){
        return 0
    }
    def toFloat(){
        return 0
    }
    def toStr(){
    //  return ""
    }
    def equals(obj){
        return this == obj
    }
}
class System
{
    def print(x){
        native system_print
    }
}
class Number = Object
{
    def new(i){
        this.data = i
        return this
    }
    def get(){
        return this.data
    }
    def set(x){
        this.data = x
        return this
    }
}
class Dict = Object
{
    def get(key){
        native dict_get
    }
    def set(key,x){
        native dict_set
    }
    def remove(key){
        native dict_remove
    }
}
//fixed length array
class Array = Object
{
    def newArray(size){
        native array_new
    }
    def new(size){
        this.data = this.newArray(size)
        this.size = size
        return this
    }
     def get(i){
        native array_get
    }
    def set(i,x){
        native array_set
    }
    def length(){
        return this.size
    }
    def find(x){
        i = 0
        while i< this.size {
            if this.get(i) == x
                return i
            i = i + 1
        }
        return -1
    }
    def contains(x){
         i = 0
        while i< this.size {
            if this.get(i) == x
                return 1
            i = i + 1
        }
        return 0
    }
}
//dynamic array
class Vector = Array
{
    def new(){
        this.data = Array.new(64)
        this.capacity = 64
        this.size = 0
        return this
    }
    def get(index){
        return this.data.get(index)
    }
    def set(index,x){
        this.data.set(index,x)
    }
    def length(){
        return this.size
    }
    def append(x){
        if this.size + 1 < this.capacity {
            this.set(this.size,x)
            this.size = this.size + 1
        } else {
            arr = Array.new(this.capacity * 2)
            this.capacity = this.capacity * 2
            i = 0
            while i < this.size {
                arr.set(i,this.data.get(i)) //move the data
                i = i + 1
            }
            this.data = arr
            this.set(this.size,x)
            this.size = this.size + 1
        }
    }
    def removeLast(){
        this.size = this.size - 1
    }
    
}
class Math
{
    def abs(x){
        if x < 0
            return  -x
        else
            return x
    }
    def sgn(x){
        if x > 0
            return 1
        else if x < 0
            return -1
        else
            return 0
    }
    def Pi(){
        return  3.1415926535897932384
    }
    def exp(x){
        native math_exp
    }
    def sin(x){
        native math_sin
    }
    def cos(x){
        native math_cos
    }
    def tan(x){
        native math_tan
    }
    def atan(x){
        native math_atan
    }
    def asin(x){
        native math_asin
    }
    def acos(x){
        native math_acos
    }
    def pow(x,y){
        native math_pow
    }
    def mod(x,y){
        native math_mod
    }
}
class Thread
{
    def new(){
        return this
    }
    def start(){
        this.start_impl(this , this.run)
    }
    def run(){
    }
    def start_impl(obj,func){
        native thread_start
    }
}
true = 1
false = 0
print = System.print